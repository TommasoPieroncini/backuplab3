What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

If we didn't have individual handler functions for each exception/interrupt, we wouldn't be able to push specific error codes to the stack according to the nature of the exception and we wouldn't be able to handle specific exceptions in determinate ways (i.e. in some cases we might not want to shut down the user process).

Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

We didn't have to do anything in order for softint to behave according to the grading script. The reason is that a user program cannot pick and choose which interrupts to trigger with the kernel by simply using the int $num command. This is in fact a violation of user privileges, which corresponds to interrupt vector 13. If the kernel allowed a user program to decide where to enter the kernel itself, this would cause a lot of concerns for the protection of the operating system's core (the kernel), as malicious code could exploit this vulnerability to cause damage.

The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

In order to get the desired result, the SETGATE call needs to specify 3 as the privilege level required to access the interrupt handler function. This is because the breakpoint exception may be called by a user program directly, therefore it needs to be made accessible from ring 3 of the OS.

What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

The point is to restrict user access to the kernel to the bare minimum needed, in order to reduce possibilities of malicious or wacky code damaging the core of the OS to a minimum.
